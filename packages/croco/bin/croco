#!/usr/bin/env node

const chalk = require('chalk');
const semver = require('semver');
const requiredVersion = require('../package.json').engines.node;
const program = require('commander');

if (!semver.satisfies(process.version, requiredVersion)) {
  console.log(
    chalk.red(
      `You are using Node ${process.version}, but this version of fly-cli ` +
        `requires Node ${requiredVersion}.\nPlease upgrade your Node version.`
    )
  );
  process.exit(1);
}

const asciiArt = `      
croco CLI: ${require('../package.json').version}
Node: ${process.versions.node}
OS: ${process.platform} ${process.arch}
...`;

program.version(asciiArt).usage('<command> [options]');

program
  .command('init <pro-name>')
  .description('generate a new project by template')
  .option('-t, --template [template]', 'use custom template')
  .action((name, cmd) => {
    require('../lib/init')(name, cleanArgs(cmd));
  })
  .on('--help', () => {
    console.log();
    console.log('  Examples:');
    console.log();
    console.log(
      chalk.gray('    # create a new project with name "my-project"')
    );
    console.log('    $ croco init my-project');
    console.log();
  });


program.arguments('<command>').action(cmd => {
  program.outputHelp();
  console.log(`  ` + chalk.red(`Unknown command ${chalk.yellow(cmd)}.`));
  console.log();
});

program.on('--help', () => {
  console.log('');
  console.log(
    `  Run ${chalk.cyan(
      `croco <command> --help`
    )} for detailed usage of given command.`
  );
  console.log();
});

const enhanceErrorMessages = (methodName, log) => {
  program.Command.prototype[methodName] = function(...args) {
    if (methodName === 'unknownOption' && this._allowUnknownOption) {
      return;
    }
    this.outputHelp();
    console.log(`  ` + chalk.red(log(...args)));
    console.log();
    process.exit(1);
  };
};

enhanceErrorMessages('missingArgument', argName => {
  return `Missing required argument ${chalk.yellow(`<${argName}>`)}.`;
});

enhanceErrorMessages('unknownOption', optionName => {
  return `Unknown option ${chalk.yellow(optionName)}.`;
});

enhanceErrorMessages('optionMissingArgument', (option, flag) => {
  return (
    `Missing required argument for option ${chalk.yellow(option.flags)}` +
    (flag ? `, got ${chalk.yellow(flag)}` : ``)
  );
});

program.commands.forEach(c => c.on('--help', () => console.log()));

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}

function cleanArgs(cmd) {
  const args = {};
  cmd.options.forEach(o => {

    const key = o.long.replace(/^--/, '');
    if (typeof cmd[key] !== 'function') {
      args[key] = cmd[key];
    }
  });
  return args;
}
